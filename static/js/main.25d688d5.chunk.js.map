{"version":3,"sources":["components/Form.js","components/Card.js","components/CardList.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","Form","state","userName","handleSubmit","event","a","preventDefault","get","resp","props","onSubmit","data","setState","this","type","value","onChange","target","placeholder","required","React","Component","Card","profile","className","src","avatar_url","name","company","CardList","profiles","map","key","id","App","addNewProfile","profileData","prevState","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SACMA,EAAQC,EAAQ,IA4BPC,E,4MAzBbC,MAAQ,CAAEC,SAAU,I,EACpBC,a,uCAAe,WAAMC,GAAN,eAAAC,EAAA,6DACbD,EAAME,iBADO,SAEMR,EAAMS,IAAN,uCACe,EAAKN,MAAMC,WAHhC,OAEPM,EAFO,OAKb,EAAKC,MAAMC,SAASF,EAAKG,MACzB,EAAKC,SAAS,CAAEV,SAAU,KANb,2C,6GAQL,IAAD,OACP,OACE,0BAAMQ,SAAUG,KAAKV,cACnB,2BACEW,KAAK,OACLC,MAAOF,KAAKZ,MAAMC,SAClBc,SAAU,SAAAZ,GAAK,OAAI,EAAKQ,SAAS,CAAEV,SAAUE,EAAMa,OAAOF,SAC1DG,YAAY,kBACZC,UAAQ,IAEV,iD,GApBWC,IAAMC,WCeVC,G,6KAbX,IAAMC,EAAUV,KAAKJ,MACrB,OACE,yBAAKe,UAAU,kBACb,yBAAKC,IAAKF,EAAQG,aAClB,yBAAKF,UAAU,QACb,yBAAKA,UAAU,QAAQD,EAAQI,MAC/B,yBAAKH,UAAU,WAAWD,EAAQK,e,GARzBR,IAAMC,YCQVQ,EARE,SAAApB,GAAK,OACpB,6BACGA,EAAMqB,SAASC,KAAI,SAAAR,GAAO,OACzB,kBAAC,EAAD,eAAMS,IAAKT,EAAQU,IAAQV,SCmBlBW,E,4MAnBbjC,MAAQ,CACN6B,SAAU,I,EAEZK,cAAgB,SAAAC,GACd,EAAKxB,UAAS,SAAAyB,GAAS,MAAK,CAC1BP,SAAS,GAAD,mBAAMO,EAAUP,UAAhB,CAA0BM,S,uDAIpC,OACE,6BACE,yBAAKZ,UAAU,UAAUX,KAAKJ,MAAM6B,OACpC,kBAAC,EAAD,CAAM5B,SAAUG,KAAKsB,gBACrB,kBAAC,EAAD,CAAUL,SAAUjB,KAAKZ,MAAM6B,gB,GAdrBV,IAAMC,WCOJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25d688d5.chunk.js","sourcesContent":["import React from \"react\";\r\nconst axios = require(\"axios\");\r\n\r\nclass Form extends React.Component {\r\n  state = { userName: \"\" };\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    const resp = await axios.get(\r\n      `https://api.github.com/users/${this.state.userName}`\r\n    );\r\n    this.props.onSubmit(resp.data);\r\n    this.setState({ userName: \"\" });\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.userName}\r\n          onChange={event => this.setState({ userName: event.target.value })}\r\n          placeholder=\"GitHub username\"\r\n          required\r\n        />\r\n        <button>Add card</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"../app.css\";\r\n\r\nclass Card extends React.Component {\r\n  render() {\r\n    const profile = this.props;\r\n    return (\r\n      <div className=\"github-profile\">\r\n        <img src={profile.avatar_url} />\r\n        <div className=\"info\">\r\n          <div className=\"name\">{profile.name}</div>\r\n          <div className=\"company\">{profile.company}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = props => (\r\n  <div>\r\n    {props.profiles.map(profile => (\r\n      <Card key={profile.id} {...profile} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport Form from \"./components/Form\";\r\nimport CardList from \"./components/CardList\";\r\nimport \"./app.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    profiles: []\r\n  };\r\n  addNewProfile = profileData => {\r\n    this.setState(prevState => ({\r\n      profiles: [...prevState.profiles, profileData]\r\n    }));\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"header\">{this.props.title}</div>\r\n        <Form onSubmit={this.addNewProfile} />\r\n        <CardList profiles={this.state.profiles} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}